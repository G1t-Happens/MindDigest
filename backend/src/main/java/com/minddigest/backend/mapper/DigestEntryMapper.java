package com.minddigest.backend.mapper;

import com.minddigest.backend.dto.DigestEntryDto;
import com.minddigest.backend.entity.DigestEntry;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;


/**
 * Mapper interface for converting between {@link DigestEntry} and {@link DigestEntryDto}.
 * <p>
 * This interface uses MapStruct to automatically generate the implementation for mapping between the entity and DTO objects.
 * It is annotated with {@code @Mapper(componentModel = "spring")}, which allows Spring to manage the instance of the mapper as a Spring bean.
 * This ensures that the mapper can be injected into Spring components and reused throughout the application.
 * </p>
 *
 * @see DigestEntry
 * @see DigestEntryDto
 */
@Mapper(componentModel = "spring")
public interface DigestEntryMapper {

    /**
     * Converts a {@link DigestEntry} entity to a {@link DigestEntryDto}.
     * <p>
     * This method converts the {@link DigestEntry} entity to a {@link DigestEntryDto},
     * ignoring the {@code id} field in the entity as the ID is handled separately,
     * usually provided via a path variable during requests.
     * </p>
     *
     * @param entity the {@link DigestEntry} entity to be converted
     * @return the corresponding {@link DigestEntryDto} object without the {@code id} field
     */
    DigestEntryDto toDto(DigestEntry entity);

    /**
     * Converts a {@link DigestEntryDto} to a {@link DigestEntry} entity.
     * <p>
     * This method converts a {@link DigestEntryDto} into a {@link DigestEntry} entity,
     * which is suitable for persistence in the database. The {@code id} field is typically
     * generated by the database upon saving the entity and should not be set manually in the DTO.
     * The {@code id} field is ignored during the mapping process to avoid overriding the auto-generated ID.
     * If the id is needed (DELETE, UPDATE, GET), the ID is handled separately, usually provided via a path variable during requests.
     * </p>
     *
     * @param dto the {@link DigestEntryDto} to be converted
     * @return the corresponding {@link DigestEntry} entity, without the {@code id} field being set
     */
    @Mapping(target = "id", ignore = true)
    DigestEntry toEntity(DigestEntryDto dto);

    /**
     * Updates the fields of an existing {@link DigestEntry} entity using the values from the provided {@link DigestEntryDto}.
     * <p>
     * This method copies all properties from the {@link DigestEntryDto} to the {@link DigestEntry} entity,
     * ignoring the {@code id} field to ensure that the existing entity's ID remains unchanged.
     * The ID is typically already set when the entity is retrieved from the database, and we do not want to overwrite it.
     * </p>
     *
     * @param dto    the {@link DigestEntryDto} containing the updated data
     * @param entity the existing {@link DigestEntry} entity that will be updated with the values from the DTO
     * @see DigestEntry
     * @see DigestEntryDto
     */
    @Mapping(target = "id", ignore = true)
    void updateEntityFromDto(DigestEntryDto dto, @MappingTarget DigestEntry entity);
}
